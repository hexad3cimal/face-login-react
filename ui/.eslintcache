[{"/home/hexad3cimal/Downloads/face-login-react/ui/src/index.js":"1","/home/hexad3cimal/Downloads/face-login-react/ui/src/App.js":"2","/home/hexad3cimal/Downloads/face-login-react/ui/src/reportWebVitals.js":"3","/home/hexad3cimal/Downloads/face-login-react/ui/src/components/LandingPage.js":"4","/home/hexad3cimal/Downloads/face-login-react/ui/src/utils/helper.js":"5"},{"size":500,"mtime":1611637273926,"results":"6","hashOfConfig":"7"},{"size":169,"mtime":1611637331687,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1611637274032,"results":"9","hashOfConfig":"7"},{"size":5708,"mtime":1613842262346,"results":"10","hashOfConfig":"7"},{"size":1465,"mtime":1613670030989,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1dis43a",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/home/hexad3cimal/Downloads/face-login-react/ui/src/index.js",[],["25","26"],"/home/hexad3cimal/Downloads/face-login-react/ui/src/App.js",[],"/home/hexad3cimal/Downloads/face-login-react/ui/src/reportWebVitals.js",[],"/home/hexad3cimal/Downloads/face-login-react/ui/src/components/LandingPage.js",["27","28"],"import React, { useEffect, useRef, useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Box from \"@material-ui/core/Box\";\n\nimport {\n  Button,\n  makeStyles,\n  Container,\n  Grid,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport { createFaceMatcher, getDescriptor, getImageDetails } from \"../utils/helper\";\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    margin: \"3rem\",\n    justifyContent: \"center\",\n  },\n  video: {\n    width: \"320\",\n    height: \"240\",\n  },\n  button: { margin: \"1rem\", width: \"10rem\" },\n  captureButton: { margin: \"1rem\", width: \"15rem\", alignSelf: \"center\" },\n}));\n\nconst LandingPage = () => {\n  const [userDetails, setUserDetails] = useState({ id: '', fullName: '', email: '' });\n  const [signUp, setSignUp] = useState(true);\n  const [cameraAccess, setCameraAccess] = useState(false)\n  const [loginEmail,setLoginEmail] = useState(\"\")\n  const cameraRef = useRef(null);\n  const canvasRef = useRef(null);\n  const canvasRef1 = useRef(null);\n  const login = async () => {\n    canvasRef1.current\n      .getContext(\"2d\")\n      .drawImage(cameraRef.current, 0, 0, 320, 240);\n    const image = document.createElement(\"img\");\n    image.src = canvasRef1.current.toDataURL();\n    const descriptors = await getDescriptor(image);\n    if(!descriptors){\n      alert(' Please retake image')\n      return\n    }\n    fetch(\"http://localhost:4000/v1/user/login\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({email: loginEmail,descriptors :  Object.values(descriptors[0])}) })\n   \n  };\n  const next = () => {\n    fetch(\"http://localhost:4000/v1/user\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(userDetails),\n    })\n      .then((response) => {\n        return response.json();\n      })\n      .then((json) => {\n        setUserDetails({...userDetails,...json.data})\n      })\n      .catch((e) => {\n        alert(JSON.stringify(e));\n      });\n  };\n\n  const capture = async () => {\n    canvasRef.current\n      .getContext(\"2d\")\n      .drawImage(cameraRef.current, 0, 0, 100, 100);\n    const image = document.createElement(\"img\");\n    image.src = canvasRef.current.toDataURL();\n    const descriptors = await getDescriptor(image);\n    if(!descriptors){\n      alert(' Please retake image')\n      return\n    }\n    fetch(\"http://localhost:4000/v1/user\", {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({...userDetails,descriptors : Object.values(descriptors[0])})})\n   \n    setSignUp(false);\n  };\n  \n\n  useEffect(() => {\n    const mediaSupport = \"mediaDevices\" in navigator;\n    (userDetails.id && mediaSupport) &&\n      navigator.mediaDevices\n        .getUserMedia({ video: true })\n        .then(function (mediaStream) {\n          setCameraAccess(true)\n          if(cameraRef.current){\n            cameraRef.current.srcObject = mediaStream;\n            cameraRef.current.play();\n          }\n\n        })\n        .catch(function (err) {\n          alert(\"Unable to access camera: \" + err);\n        });\n  }, [userDetails.id]);\n\n  const classes = useStyles();\n\n  return (\n    <Container maxWidth={true}>\n      <Grid item lg={6} className={classes.root}>\n        <Card>\n          <CardContent>\n            {userDetails.id ? (\n              <Box style={{ display: \"flex\", flexDirection: \"column\" }}>\n                <video ref={cameraRef} className={classes.video}></video>\n                <canvas ref={canvasRef} style={{display:'block', width:'500px',height:'500px'}}></canvas>\n                \n\n                <Button\n                  variant=\"contained\"\n                  onClick={() => {\n                    capture();\n                  }}\n                  className={classes.captureButton}\n                  disabled={!cameraAccess}\n\n                >\n                  Capture your pic\n                </Button>\n              </Box>\n            ) : (\n              <Box style={{ display: \"flex\", flexDirection: \"column\" }}>\n                <TextField\n                  label=\"Full Name\"\n                  name=\"fullName\"\n                  onChange={(event) => {\n                    setUserDetails({ fullName: event.target.value });\n                  }}\n\n                />\n                <TextField\n                  label=\"Email\"\n                  name=\"email\"\n                  onChange={(event) => {\n                    setUserDetails({\n                      ...userDetails,\n                      email: event.target.value,\n                    });\n                  }}\n                />\n                <Button\n                  variant=\"contained\"\n                  onClick={() => {\n                    next();\n                  }}\n                  className={classes.button}\n                >\n                  Next\n                </Button>\n              </Box>\n            )}\n            {!signUp ?\n              <Box>\n                  <canvas ref={canvasRef1} width=\"320\" height=\"240\"></canvas> \n                  <TextField\n            label=\"Email\"\n            name=\"email\"\n            onChange={(event) => {\n              setLoginEmail(event.target.value);\n            }}\n\n          />\n                <Button\n                  variant=\"contained\"\n                  onClick={() => {\n                    login();\n                  }}\n                >\n                  Login\n                </Button></Box> : null}\n          </CardContent>\n        </Card>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default LandingPage;\n","/home/hexad3cimal/Downloads/face-login-react/ui/src/utils/helper.js",[],["29","30"],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":13,"column":10,"nodeType":"37","messageId":"38","endLine":13,"endColumn":27},{"ruleId":"35","severity":1,"message":"39","line":13,"column":44,"nodeType":"37","messageId":"38","endLine":13,"endColumn":59},{"ruleId":"31","replacedBy":"40"},{"ruleId":"33","replacedBy":"41"},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"no-unused-vars","'createFaceMatcher' is defined but never used.","Identifier","unusedVar","'getImageDetails' is defined but never used.",["42"],["43"],"no-global-assign","no-unsafe-negation"]